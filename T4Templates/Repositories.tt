<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Microsoft.VisualStudio.Shell.Interop.8.0" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="EnvDTE80" #>
<#@ assembly name="VSLangProj" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="Microsoft.VisualStudio.Shell.Interop" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Xml" #>
<#Prepare(); #>
// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
using NecroNet.Toolkit.EntityFramework;

namespace <#= DefaultNamespace #>
{
<# foreach (ObjectContextInfo contextInfo in ObjectContextInfos) { #>
	public partial class <#= contextInfo.TypeName #>RepositoryBase<TEntity> : UltimateEntityRepositoryBase<<#= contextInfo.TypeName #>Entities, TEntity>
		where TEntity : class
	{
		protected override <#= contextInfo.TypeName #>Entities ObjectContext
		{
			get
			{
				return (<#= contextInfo.TypeName #>Entities)UnitOfWork.CurrentContext;
			}
		}
	}
<# foreach (EntitySetInfo entitySetInfo in contextInfo.EntitySets) { #>

	// Entity Set : <#= entitySetInfo.SetName #> | Type Name : <#= entitySetInfo.TypeName #>
	public partial interface I<#= entitySetInfo.TypeName #>Repository : IRepository<<#= entitySetInfo.TypeName #>>
	{
	}
	
	[EntitySetName("<#= entitySetInfo.SetName #>")]
	public partial class <#= entitySetInfo.TypeName #>Repository : <#= contextInfo.TypeName #>RepositoryBase<<#= entitySetInfo.TypeName #>>, I<#= entitySetInfo.TypeName #>Repository
	{
	}
<# } #>
<# } #>
}
	
<#+
static DTE Dte;
static List<string> Edmx;
static string DefaultNamespace;
static List<ObjectContextInfo> ObjectContextInfos;

void Prepare()
{
	Edmx = new List<string>();
	var serviceProvider = Host as IServiceProvider;
	if (serviceProvider != null) {
		Dte = serviceProvider.GetService(typeof(SDTE)) as DTE;
	}
	
	var project = GetProjectContainingT4File(Dte);
	DefaultNamespace = project.Properties.Item("DefaultNamespace").Value.ToString();
	FindEdmx(project.ProjectItems);
	
	ObjectContextInfos = GetEntityNames();
}

List<ObjectContextInfo> GetEntityNames()
{
	var infos = new List<ObjectContextInfo>();
	XNamespace edmxNs = "http://schemas.microsoft.com/ado/2008/10/edmx";
	XNamespace innerNs = "http://schemas.microsoft.com/ado/2008/09/edm";
	foreach (var edmx in Edmx)
	{
		var info = new ObjectContextInfo();
		var document = XDocument.Load(edmx);
		
		var conceptualModel = document.Descendants(edmxNs + "ConceptualModels").First();
		
		info.TypeName = ((string) conceptualModel.Descendants(innerNs + "EntityContainer").First().Attribute("Name")).Replace("Entities", string.Empty);
		
		info.EntitySets = (from e in conceptualModel.Descendants(innerNs + "EntitySet")
						   select new EntitySetInfo
									{
										SetName = (string) e.Attribute("Name"),
										TypeName = GetTypeName((string) e.Attribute("EntityType"))
									}).ToList();
									
		infos.Add(info);
	}
	
	return infos;
}

string GetTypeName(string typeName)
{
	return typeName.Substring(typeName.LastIndexOf(".") + 1);
}

void FindEdmx(ProjectItems collection)
{
	if(collection == null || collection.Count == 0)
	{
		return;
	}
	
	foreach (ProjectItem item in collection)
	{
		for (short i = 0; i < item.FileCount; i++)
		{
			string filename = item.FileNames[i];
			if(Path.GetExtension(filename) == ".edmx")
			{
				Edmx.Add(filename);
			}
		}
		
		FindEdmx(item.ProjectItems);
	}
}

Project GetProjectContainingT4File(DTE dte) {

    // Find the .tt file's ProjectItem
    ProjectItem projectItem = dte.Solution.FindProjectItem(Host.TemplateFile);

    // If the .tt file is not opened, open it
    if (projectItem.Document == null)
        projectItem.Open(Constants.vsViewKindCode);

    return projectItem.ContainingProject;
}

class ObjectContextInfo
{
	public string TypeName { get; set; }
	public List<EntitySetInfo> EntitySets { get; set; }
}

class EntitySetInfo
{
	public string SetName { get; set; }
	public string TypeName { get; set; }
}
#>