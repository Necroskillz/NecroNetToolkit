// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

using NecroNet.Toolkit.Data;
using NecroNetToolkit.Web.Model;

namespace NecroNetToolkit.Web.Model
{

	public abstract partial class AllDealsEntitiesRepositoryBase<TEntity> : CodeFirstRepositoryBase<AllDealsEntities, TEntity>
		where TEntity : class
	{
		private readonly IUnitOfWorkManager _unitOfWorkManager;
		
		protected AllDealsEntitiesRepositoryBase(IUnitOfWorkManager unitOfWorkManager)
		{
			_unitOfWorkManager = unitOfWorkManager;
		}
		
		protected override AllDealsEntities DbContext
		{
			get
			{
				return _unitOfWorkManager.GetCurrent<AllDealsEntities>().Context.AsActual<AllDealsEntities>();
			}
		}
	}

	// Type Name : ActualDeal
	public partial interface IActualDealRepository : IRepository<ActualDeal>
	{
	}
	
	public partial class ActualDealRepository : AllDealsEntitiesRepositoryBase<ActualDeal>, IActualDealRepository
	{
		public ActualDealRepository(IUnitOfWorkManager unitOfWorkManager) : base(unitOfWorkManager)
		{
		}
	}

	// Type Name : Category
	public partial interface ICategoryRepository : IRepository<Category>
	{
	}
	
	public partial class CategoryRepository : AllDealsEntitiesRepositoryBase<Category>, ICategoryRepository
	{
		public CategoryRepository(IUnitOfWorkManager unitOfWorkManager) : base(unitOfWorkManager)
		{
		}
	}

	// Type Name : City
	public partial interface ICityRepository : IRepository<City>
	{
	}
	
	public partial class CityRepository : AllDealsEntitiesRepositoryBase<City>, ICityRepository
	{
		public CityRepository(IUnitOfWorkManager unitOfWorkManager) : base(unitOfWorkManager)
		{
		}
	}

	// Type Name : HistoryDeal
	public partial interface IHistoryDealRepository : IRepository<HistoryDeal>
	{
	}
	
	public partial class HistoryDealRepository : AllDealsEntitiesRepositoryBase<HistoryDeal>, IHistoryDealRepository
	{
		public HistoryDealRepository(IUnitOfWorkManager unitOfWorkManager) : base(unitOfWorkManager)
		{
		}
	}

	// Type Name : Index
	public partial interface IIndexRepository : IRepository<Index>
	{
	}
	
	public partial class IndexRepository : AllDealsEntitiesRepositoryBase<Index>, IIndexRepository
	{
		public IndexRepository(IUnitOfWorkManager unitOfWorkManager) : base(unitOfWorkManager)
		{
		}
	}

	// Type Name : Log
	public partial interface ILogRepository : IRepository<Log>
	{
	}
	
	public partial class LogRepository : AllDealsEntitiesRepositoryBase<Log>, ILogRepository
	{
		public LogRepository(IUnitOfWorkManager unitOfWorkManager) : base(unitOfWorkManager)
		{
		}
	}

	// Type Name : MetaCategory
	public partial interface IMetaCategoryRepository : IRepository<MetaCategory>
	{
	}
	
	public partial class MetaCategoryRepository : AllDealsEntitiesRepositoryBase<MetaCategory>, IMetaCategoryRepository
	{
		public MetaCategoryRepository(IUnitOfWorkManager unitOfWorkManager) : base(unitOfWorkManager)
		{
		}
	}

	// Type Name : Server
	public partial interface IServerRepository : IRepository<Server>
	{
	}
	
	public partial class ServerRepository : AllDealsEntitiesRepositoryBase<Server>, IServerRepository
	{
		public ServerRepository(IUnitOfWorkManager unitOfWorkManager) : base(unitOfWorkManager)
		{
		}
	}

	// Type Name : State
	public partial interface IStateRepository : IRepository<State>
	{
	}
	
	public partial class StateRepository : AllDealsEntitiesRepositoryBase<State>, IStateRepository
	{
		public StateRepository(IUnitOfWorkManager unitOfWorkManager) : base(unitOfWorkManager)
		{
		}
	}

	// Type Name : sysdiagram
	public partial interface IsysdiagramRepository : IRepository<sysdiagram>
	{
	}
	
	public partial class sysdiagramRepository : AllDealsEntitiesRepositoryBase<sysdiagram>, IsysdiagramRepository
	{
		public sysdiagramRepository(IUnitOfWorkManager unitOfWorkManager) : base(unitOfWorkManager)
		{
		}
	}

	// Dependency injection configuration
	public class TestNinjectModule : global::Ninject.Modules.NinjectModule
	{
		public override void Load()
		{
			// AllDealsEntities
			Kernel.Bind<IActualDealRepository>().To<ActualDealRepository>().InSingletonScope();
			Kernel.Bind<IRepository<ActualDeal>>().To<ActualDealRepository>().InSingletonScope();
			Kernel.Bind<ICategoryRepository>().To<CategoryRepository>().InSingletonScope();
			Kernel.Bind<IRepository<Category>>().To<CategoryRepository>().InSingletonScope();
			Kernel.Bind<ICityRepository>().To<CityRepository>().InSingletonScope();
			Kernel.Bind<IRepository<City>>().To<CityRepository>().InSingletonScope();
			Kernel.Bind<IHistoryDealRepository>().To<HistoryDealRepository>().InSingletonScope();
			Kernel.Bind<IRepository<HistoryDeal>>().To<HistoryDealRepository>().InSingletonScope();
			Kernel.Bind<IIndexRepository>().To<IndexRepository>().InSingletonScope();
			Kernel.Bind<IRepository<Index>>().To<IndexRepository>().InSingletonScope();
			Kernel.Bind<ILogRepository>().To<LogRepository>().InSingletonScope();
			Kernel.Bind<IRepository<Log>>().To<LogRepository>().InSingletonScope();
			Kernel.Bind<IMetaCategoryRepository>().To<MetaCategoryRepository>().InSingletonScope();
			Kernel.Bind<IRepository<MetaCategory>>().To<MetaCategoryRepository>().InSingletonScope();
			Kernel.Bind<IServerRepository>().To<ServerRepository>().InSingletonScope();
			Kernel.Bind<IRepository<Server>>().To<ServerRepository>().InSingletonScope();
			Kernel.Bind<IStateRepository>().To<StateRepository>().InSingletonScope();
			Kernel.Bind<IRepository<State>>().To<StateRepository>().InSingletonScope();
			Kernel.Bind<IsysdiagramRepository>().To<sysdiagramRepository>().InSingletonScope();
			Kernel.Bind<IRepository<sysdiagram>>().To<sysdiagramRepository>().InSingletonScope();
		}
	}
}

