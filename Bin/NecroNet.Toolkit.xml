<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NecroNet.Toolkit</name>
    </assembly>
    <members>
        <member name="M:NecroNet.Toolkit.EntityFramework.IUnitOfWork.Flush">
            <summary>
            Persists all updates to the data source.
            </summary>
        </member>
        <member name="T:NecroNet.Toolkit.EntityFramework.IObjectContextFactory">
            <summary>
            Defines a method for creating object context.
            </summary>
        </member>
        <member name="M:NecroNet.Toolkit.EntityFramework.IObjectContextFactory.CreateObjectContext">
            <summary>
            Creates a object context.
            </summary>
        </member>
        <member name="T:NecroNet.Toolkit.ISortedPagedList`1">
            <summary>
            Represent a paged list, that is sorted.
            </summary>
            <typeparam name="T">Type of list items.</typeparam>
        </member>
        <member name="M:NecroNet.Toolkit.EntityFramework.ObjectContextExtensions.FullTextSearch``1(System.Linq.IQueryable{``0},System.String,System.Boolean,System.String[])">
            <summary>
            Searches in all string properties for the specifed search key.
            It is also able to search for several words. If the searchKey is for example 'John Travolta' then
            with exactMatch set to false all records which contain either 'John' or 'Travolta' in some string property
            are returned.
            </summary>
            <param name="query">Base query for the search.</param>
            <param name="searchKey">Search term.</param>
            <param name="exactMatch">Specifies if only the whole word or every single word should be searched.</param>
            <param name="searchProperties">Properties to check for matches.</param>
            <returns>Query that matches specified search parameters.</returns>
        </member>
        <member name="M:NecroNet.Toolkit.Slug.Generate(System.String)">
            <summary>
            Generates a 'slug' from string. Slugs are used for nice web page url parameters. e.g: 'NecroNet Toolkit is awesome!!' becomes 'necronet-toolkit-is-awesome'.
            </summary>
        </member>
        <member name="M:NecroNet.Toolkit.Slug.Generate(System.String,System.Int32)">
            <summary>
            Generates a 'slug' from string and appends specified id. Slugs are used for nice web page url parameters. e.g: 'NecroNet Toolkit is awesome!!' becomes 'necronet-toolkit-is-awesome-&lt;id&gt;'.
            </summary>
        </member>
        <member name="M:NecroNet.Toolkit.Mail.IMailBot.SendHtmlMail(System.String,System.String,System.String,System.Object)">
            <summary>
            Sends an email with html body and specified subject to a single recipient.
            Body is rendered by using asp.net mvc view and a model. (some restrictions apply)
            </summary>
            <param name="to">Address of the recipient.</param>
            <param name="subject">Subject of the email message.</param>
            <param name="templateView">Partial view (.ascx) used to render email body.</param>
            <param name="model">Model for the specified view.</param>
        </member>
        <member name="M:NecroNet.Toolkit.Mail.IMailBot.SendMassHtmlMail(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Object)">
            <summary>
            Sends an email with html body and specified subject to a multiple recipients.
            Body is rendered by using asp.net mvc view and a model. (some restrictions apply)
            </summary>
            <param name="to">Addresses of recipients.</param>
            <param name="subject">Subject of the email message.</param>
            <param name="templateView">Partial view (.ascx) used to render email body.</param>
            <param name="model">Model for the specified view.</param>
        </member>
        <member name="M:NecroNet.Toolkit.Mail.IMailBot.SendTextMail(System.String,System.String,System.String)">
            <summary>
            Sends an email with text body and specified subject to a single recipient.
            </summary>
            <param name="to">Address of the recipient.</param>
            <param name="subject">Subject of the email message.</param>
            <param name="body">Text representing the email body.</param>
        </member>
        <member name="M:NecroNet.Toolkit.Mail.IMailBot.SendTextMail(System.String,System.String,System.String,System.Object[])">
            <summary>
            Sends an email with text body and specified subject to a single recipient.
            Body is rendered with string.Format(bodyTemplate, args) method.
            </summary>
            <param name="to">Address of the recipient.</param>
            <param name="subject">Subject of the email message.</param>
            <param name="bodyTemplate">Text format for the email body.</param>
            <param name="args">Arguments for the email body format.</param>
        </member>
        <member name="M:NecroNet.Toolkit.Mail.IMailBot.SendMassTextMail(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            Sends an email with text body and specified subject to a multiple recipients.
            </summary>
            <param name="to">Addresses of recipients.</param>
            <param name="subject">Subject of the email message.</param>
            <param name="body">Text representing the email body.</param>
        </member>
        <member name="M:NecroNet.Toolkit.Mail.IMailBot.SendMassTextMail(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Object[])">
            <summary>
            Sends an email with text body and specified subject to a multiple recipients.
            Body is rendered with string.Format(bodyTemplate, args) method.
            </summary>
            <param name="to">Addresses of recipients.</param>
            <param name="subject">Subject of the email message.</param>
            <param name="bodyTemplate">Text format for the email body.</param>
            <param name="args">Arguments for the email body format.</param>
        </member>
        <member name="E:NecroNet.Toolkit.Mail.IMailBot.SendingCompleted">
            <summary>
            Event, that fires when sending of a single email is completed. Fires once for every email.
            </summary>
        </member>
        <member name="M:NecroNet.Toolkit.StringExtensions.ToSlug(System.String,System.Char)">
            <summary>
            Converts string to 'slug', used in web page urls. Removes all symbols, converts to lowercase and replaces white spaces with specified delimiter.
            </summary>
            <param name="delimiter">The delimiter to replace white spaces with.</param>
        </member>
        <member name="M:NecroNet.Toolkit.StringExtensions.ToCsv(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Converts a a set of strings to csv format, delimited by specified delimiter.
            </summary>
            <param name="delimiter">The separator.</param>
        </member>
        <member name="M:NecroNet.Toolkit.StringExtensions.IsNumeric(System.String)">
            <summary>
            Determines whether this string is a number (i.e. can be converted to double)
            </summary>
        </member>
        <member name="M:NecroNet.Toolkit.EntityFramework.UnitOfWork.Setup(System.Type)">
            <summary>
            Sets up unit of work with factory type that can create object context (<see cref="T:NecroNet.Toolkit.EntityFramework.IObjectContextFactory"/>).
            </summary>
            <param name="objectContextFactoryType"><see cref="T:NecroNet.Toolkit.EntityFramework.IObjectContextFactory"/> you want to use for creating object contexts.</param>
        </member>
        <member name="M:NecroNet.Toolkit.EntityFramework.UnitOfWork.Start">
            <summary>
            Starts a unit of work.
            </summary>
            <returns>Unit of work scope object.</returns>
        </member>
        <member name="P:NecroNet.Toolkit.EntityFramework.UnitOfWork.Current">
            <summary>
            Gets currently active unit of work.
            </summary>
        </member>
        <member name="P:NecroNet.Toolkit.EntityFramework.UnitOfWork.IsStarted">
            <summary>
            Gets whether a unit of work has been started, and have not yet been disposed.
            </summary>
        </member>
        <member name="P:NecroNet.Toolkit.EntityFramework.UnitOfWork.CurrentContext">
            <summary>
            Gets current underlying object context.
            </summary>
        </member>
    </members>
</doc>
